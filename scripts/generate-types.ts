import openapiTS from "openapi-typescript";
import fs from "fs";

async function generateTypes(apiSpecPath: string, outputPath: string) {
  const localPath = new URL(apiSpecPath, import.meta.url);
  let output = await openapiTS(localPath, {
    alphabetize: true,
    exportType: true,
    transform(schemaObject) {
      if ("x-ts-type" in schemaObject) {
        return schemaObject["x-ts-type"];
      }
    },
  });
  const schemasPosition = output.indexOf("schemas: {") + 10;
  output = output
    // Remove everything before and after the schemas, as we're only interested in schemas.
    .substring(
      schemasPosition,
      output.indexOf("\n  };\n  responses", schemasPosition)
    )
    // Turn components["schemas"]["{TYPE_NAME}"] into TYPE_NAME
    .replace(/components\["schemas"]\["(\w*)"\]/gm, "$1")
    .split("\n")
    // De-indent everything by 4
    .map((l) => l.substring(4))
    .map((l) => {
      if (l.trim() === "" || l.startsWith(" ") || l.startsWith("/")) return l;
      // Add newlines after each type
      if (l.endsWith(";")) l += "\n";
      // Replace `{TYPE_NAME}: ` with `export type {TYPE_NAME} = ` for each type
      l = l.replace(/(?!\s)(.*): /, "export type $1 = ");
      return l;
    })
    .join("\n");

  output = output
    // replace single line comments with multi-line comments to normalize input
    .replaceAll(/\/\*\*(.*)\*\//g, "/**\n  *$1\n  */")
    // remove enum (unsupported by tsdoc)
    .replaceAll(/(?: *)\* @enum(?:.*)\n/g, "")
    // remove constant (unsupported by tsdoc)
    .replaceAll(/(?: *)\* @constant(?: *)\n/g, "")
    // replace default with defaultValue (supported by tsdoc)
    .replaceAll("@default ", "@defaultValue ")
    // put string defaultValue in quotes
    .replaceAll(/@defaultValue ([^0-9]+\d*)/g, '@defaultValue "$1"')
    // remove format (unsupported by tsdoc)
    .replaceAll(/ \* Format:(?:.*)\n/g, "")
    // replace prefix js examples with js code blocks
    .replaceAll(
      /@example (?:({(?:\n|.)*? \* })|(\[(?:\n|.)*? \* \]))/gm,
      "@example\n * ```js\n * $1$2\n * ```"
    )
    // put string examples in quotes
    .replaceAll(/@example ([^0-9]+\d*)/g, '@example "$1"')
    // replace greater than with &gt;
    .replaceAll(/( *\* @description.*)>(.*)/g, "$1&gt;$2")
    // replace lower than with &lt;
    .replaceAll(/( *\* @description.*)<(.*)/g, "$1&lt;$2")
    // move description to the beginning of multi-line comments
    .replaceAll(
      /( *\/\*\* *\n)((?:\s|\S)*)\n(\s*\* @description (?:.*))( *\*\/\n)/gm,
      "$1$3$2$4"
    )
    .replaceAll(
      /(?:\[(.*)\])(?:\(((?:http)(?:s)?(?::\/\/).*)\))/gm,
      "{@link $2 | $1 }"
    )
    // remove description tag
    .replaceAll("@description ", "")
    // remove empty multiline comments
    .replaceAll(/( *)*\/\*\*\s*\*\/\n/gm, "");

  // Add file header
  output =
    `// this file is generated by typescript/scripts/generate-types.ts
/* tslint:disable */
/* eslint-disable */
import { LiteralUnion } from "./helpers";

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

/* eslint-enable */
` + output;

  fs.writeFileSync(outputPath, output);
}

generateTypes("../../spec/openapi.yml", "./src/types/openapi.generated.ts");
generateTypes("../../spec/asyncapi.yml", "./src/types/asyncapi.generated.ts");
