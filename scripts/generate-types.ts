import openapiTS from "openapi-typescript";
import fs from "fs";

async function generateTypes(apiSpecPath: string, outputPath: string) {
  const localPath = new URL(apiSpecPath, import.meta.url);
  let output = await openapiTS(localPath, {
    alphabetize: true,
    exportType: true,
    transform(schemaObject, metadata) {
      if (
        "x-fern-type" in schemaObject &&
        schemaObject["x-fern-type"] === "datetime"
      ) {
        // Use Date as type instead of String, even though it will be a string.
        // The service code manually converts the string into a Date.
        // Fe see `TranscriptService#list`.
        return schemaObject.nullable ? "Date | null" : "Date";
      }
    },
  });
  const schemasPosition = output.indexOf("schemas: {") + 10;
  output = output
    // Remove everything before and after the schemas, as we're only interested in schemas.
    .substring(
      schemasPosition,
      output.indexOf("\n  };\n  responses", schemasPosition)
    )
    // Turn components["schemas"]["{TYPE_NAME}"] into TYPE_NAME
    .replace(/components\[\"schemas\"]\[\"(\w*)\"\]/gm, "$1")
    .split("\n")
    // De-indent everything by 4
    .map((l) => l.substring(4))
    .map((l) => {
      if (l.trim() === "" || l.startsWith(" ") || l.startsWith("/")) return l;
      // Add newlines after each type
      if (l.endsWith(";")) l += "\n";
      // Replace `{TYPE_NAME}: ` with `export type {TYPE_NAME} = ` for each type
      l = l.replace(/(?!\s)(.*): /, "export type $1 = ");
      return l;
    })
    .join("\n");

  // Add file header
  output =
    `// this file is generated by typescript/scripts/generate-types.ts
/* tslint:disable */
/* eslint-disable */

/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;
` + output;

  fs.writeFileSync(outputPath, output);
}

generateTypes("../../spec/openapi.yml", "./src/types/openapi.generated.ts");
generateTypes("../../spec/asyncapi.yml", "./src/types/asyncapi.generated.ts");
